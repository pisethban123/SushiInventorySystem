@page "/stock"
@rendermode InteractiveServer
@using MudBlazor
@using SushiInventorySystem.Models
@using SushiInventorySystem.Services.Interfaces
@inject IStockService StockService
@inject IItemService ItemService
@inject IBranchService BranchService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Stock Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 px-2">
    <MudText Typo="Typo.h4" Class="mb-4">Stock Management</MudText>

    <!-- Add & Deduct Buttons -->
    <MudStack Row="true" Spacing="2" Class="mb-4">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="HandleAddStock">
            Add Stock
        </MudButton>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Error"
                   StartIcon="@Icons.Material.Filled.Remove"
                   OnClick="HandleDeductStock">
            Deduct Stock
        </MudButton>
    </MudStack>

    <!-- Stock Table -->
    <MudPaper Elevation="2" Class="table-container">
        <MudTable Items="@stocks"
                  Hover="true"
                  Striped="true"
                  Bordered="true"
                  Dense="false"
                  FixedHeader="true"
                  Height="flex"
                  Class="stock-table">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Stock List</MudText>
                <MudSpacer />
                <MudText Typo="Typo.body2" Class="mr-2">Total: @stocks.Count stocks</MudText>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Item Name</MudTh>
                <MudTh>Branch Name</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Unit</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd>@(context.Item?.ItemName ?? "N/A")</MudTd>
                <MudTd>@(context.Branch?.BranchName ?? "N/A")</MudTd>
                <MudTd>@context.Quantity</MudTd>
                <MudTd>@GetItemUnit(context.ItemId)</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

<style>
    .table-container {
        overflow: hidden;
    }

    /* Table height + scrolling (matches Stock page) */
    .item-table {
        display: block;
        max-height: 80vh;
        overflow-y: auto;
    }

        /* Sticky header */
        .item-table .mud-table-head {
            position: sticky;
            top: 0;
            z-index: 2;
            background-color: var(--mud-palette-surface);
        }

        /* Align content middle */
        .item-table .mud-table-cell {
            vertical-align: middle !important;
        }

        /* Scroll behavior */
        .item-table .mud-table-container {
            overflow-y: auto;
            scroll-behavior: smooth;
        }

    /* Mobile - up to 640px */
    @@media (max-width: 640.98px) {
        .item-table {
            font-size: 0.875rem;
        }

        .category-column,
        .supplier-column,
        .cost-column {
            display: none !important;
        }

        .mud-table-cell,
        .mud-table-head-cell {
            padding: 8px 4px !important;
        }

        .mud-container {
            padding-left: 1rem !important;
            padding-right: 1rem !important;
        }

        .item-table {
            height: calc(100vh - 280px) !important;
        }
    }

    /* Tablet (641px–960px) */
    @@media (min-width: 641px) and (max-width: 960px) {
        .supplier-column {
            display: none !important;
        }

        .item-table {
            font-size: 0.9rem;
        }
    }

    /* Medium (961px–1280px) */
    @@media (min-width: 961px) and (max-width: 1280px) {
        .item-table {
            font-size: 0.95rem;
        }
    }

    /* Desktop (≥641px) */
    @@media (min-width: 641px) {
        .item-table {
            overflow-x: auto;
        }

        .mud-container {
            max-width: 100%;
        }
    }

    /* Scrollbar style */
    .item-table .mud-table-container::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    .item-table .mud-table-container::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .item-table .mud-table-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

        .item-table .mud-table-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
</style>

@code {
    private List<Stock> stocks = new();
    private List<Item> items = new();
    private List<Branch> branches = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadStocks();
        await LoadDropdowns();
    }

    private async Task LoadStocks()
    {
        try
        {
            var result = await StockService.GetAllStocksAsync();
            stocks = result.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading stocks: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadDropdowns()
    {
        items = (await ItemService.GetAllAsync()).ToList();
        branches = (await BranchService.GetAllAsync()).ToList();
    }

    private async Task HandleAddStock()
    {
        var parameters = new DialogParameters
        {
            ["Items"] = items,
            ["Branches"] = branches,
            ["OnSave"] = EventCallback.Factory.Create<bool>(this, async (success) =>
            {
                if (success)
                    await LoadStocks();
            })
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<AddStockDialog>("Add Stock", parameters, options);
        await dialog.Result;
    }

    private async Task HandleDeductStock()
    {
        var parameters = new DialogParameters
        {
            ["Items"] = items,
            ["Branches"] = branches,
            ["OnSave"] = EventCallback.Factory.Create<bool>(this, async (success) =>
            {
                if (success)
                    await LoadStocks();
            })
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<DeductStockDialog>("Deduct Stock", parameters, options);
        await dialog.Result;
    }

    private string GetItemUnit(string? itemId)
    {
        var item = items.FirstOrDefault(i => i.ItemId == itemId);
        if (item == null) return "N/A";
        return item.Unit;
    }
}
