@page "/item"
@using MudBlazor
@using SushiInventorySystem.Data;
@using SushiInventorySystem.Models;
@using SushiInventorySystem.Services.Interfaces;
@inject IItemService ItemService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Item Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 px-2">
    <MudText Typo="Typo.h4" Class="mb-4">Item Management</MudText>

    @* Add Button *@
    <MudStack Row="true" Class="mb-4">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="HandleAdd">
            Add
        </MudButton>
    </MudStack>

    @* Item Table *@
    <MudPaper Elevation="2" Class="table-container">
        <MudTable Items="@items"
                  Hover="true"
                  Striped="true"
                  Bordered="true"
                  Dense="false"
                  FixedHeader="true"
                  Height="flex"
                  Class="item-table">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Item List</MudText>
                <MudSpacer />
                <MudText Typo="Typo.body2" Class="mr-2">Total: @items.Count items</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Item ID</MudTh>
                <MudTh>Item Name</MudTh>
                <MudTh Class="category-column">Category</MudTh>
                <MudTh Class="unit-column">Unit</MudTh>
                <MudTh Class="supplier-column">Supplier</MudTh>
                <MudTh Class="cost-column">Cost per Unit ($)</MudTh>
                <MudTh Class="min-column">Min Stock</MudTh>
                <MudTh Class="max-column">Max Stock</MudTh>
                <MudTh Style="text-align: center;">Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Item ID">@context.ItemId</MudTd>
                <MudTd DataLabel="Item Name">@context.ItemName</MudTd>
                <MudTd DataLabel="Category" Class="category-column">@context.Category</MudTd>
                <MudTd DataLabel="Unit" Class="unit-column">@context.Unit</MudTd>
                <MudTd DataLabel="Supplier" Class="supplier-column">@context.Supplier</MudTd>
                <MudTd DataLabel="Cost ($)" Class="cost-column">@context.CostPerUnit.ToString("0.00")</MudTd>
                <MudTd DataLabel="Min Stock" Class="min-column">@context.MinStock</MudTd>
                <MudTd DataLabel="Max Stock" Class="max-column">@context.MaxStock</MudTd>
                <MudTd DataLabel="Actions" Style="text-align: center;">
                    <MudIconButton Size="Size.Small"
                                   Icon="@Icons.Material.Outlined.Edit"
                                   Color="Color.Secondary"
                                   OnClick="@(() => HandleEdit(context))"
                                   Title="Edit" />
                    <MudIconButton Size="Size.Small"
                                   Icon="@Icons.Material.Outlined.Delete"
                                   Color="Color.Error"
                                   OnClick="@(() => HandleDelete(context))"
                                   Title="Delete" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

<style>
    .table-container {
        overflow: hidden;
    }

    /* Ensure all cells have consistent vertical alignment */
    .item-table .mud-table-cell {
        vertical-align: middle !important;
    }

    /* Smooth scrolling */
    .item-table .mud-table-container {
        overflow-y: auto;
        scroll-behavior: smooth;
    }

    /* Mobile - matches NavMenu breakpoint (up to 640px) */
    @@media (max-width: 640.98px) {
        .item-table {
            font-size: 0.875rem;
        }

        .category-column,
        .description-column,
        .cost-column {
            display: none !important;
        }

        .mud-table-cell,
        .mud-table-head-cell {
            padding: 8px 4px !important;
        }
        /* Adjust container padding on mobile to match main layout */
        .mud-container {
            padding-left: 1rem !important;
            padding-right: 1rem !important;
        }
        /* Adjust table height for mobile */
        .item-table {
            height: calc(100vh - 280px) !important;
        }
    }

    /* Tablet (641px to 960px) - matches NavMenu desktop breakpoint */
    @@media (min-width: 641px) and (max-width: 960px) {
        .description-column {
            display: none !important;
        }

        .item-table {
            font-size: 0.9rem;
        }
    }

    /* Medium screens (961px to 1280px) */
    @@media (min-width: 961px) and (max-width: 1280px) {
        .item-table {
            font-size: 0.95rem;
        }
    }

    /* Desktop - matches NavMenu desktop (min-width: 641px) */
    @@media (min-width: 641px) {
        .item-table {
            overflow-x: auto;
        }
    }

    /* Ensure proper spacing when sidebar is visible */
    @@media (min-width: 641px) {
        .mud-container {
            max-width: 100%;
        }
    }

    /* Custom scrollbar styling */
    .item-table .mud-table-container::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    .item-table .mud-table-container::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .item-table .mud-table-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

        .item-table .mud-table-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
</style>

@code {
    private List<Item> items = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        try
        {
            var result = await ItemService.GetAllAsync();
            items = result.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading items: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error fetching items: {ex.Message}");
        }
    }

    private async Task HandleAdd()
    {
        // Add logic will be implemented later
    }

    private void HandleEdit(Item item)
    {
        // Edit logic will be implemented later
    }

    private void HandleDelete(Item item)
    {
        // Delete logic will be implemented later
    }
}