@page "/branch"
@rendermode InteractiveServer
@using MudBlazor
@using SushiInventorySystem.Models
@using SushiInventorySystem.Services.Interfaces
@inject IBranchService BranchService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Branch Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 px-2">
    <MudText Typo="Typo.h4" Class="mb-4">Branch Management</MudText>

    @* Add Button *@
    <MudStack Row="true" Class="mb-4">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="HandleAdd">
            Add
        </MudButton>
    </MudStack>

    @* Branch Table *@
    <MudPaper Elevation="2" Class="table-container">
        <MudTable Items="@branches"
                  Hover="true"
                  Striped="true"
                  Bordered="true"
                  Dense="false"
                  FixedHeader="true"
                  Height="flex"
                  Class="branch-table">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Branch List</MudText>
                <MudSpacer />
                <MudText Typo="Typo.body2" Class="mr-2">Total: @branches.Count branches</MudText>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Branch ID</MudTh>
                <MudTh>Branch Name</MudTh>
                <MudTh Class="address-column">Address</MudTh>
                <MudTh Class="postcode-column">Postcode</MudTh>
                <MudTh Class="contact-column">Phone</MudTh>
                <MudTh Style="text-align:center;">Actions</MudTh>
            </HeaderContent>

            <RowTemplate>
                @if (editingBranch != null && editingBranch.BranchId == context.BranchId)
                {
                    <MudTd>@context.BranchId</MudTd>
                    <MudTd>
                        <MudTextField @bind-Value="editingBranch.BranchName"
                                      Dense="true" Immediate="true" />
                    </MudTd>
                    <MudTd Class="address-column">
                        <MudTextField @bind-Value="editingBranch.Address"
                                      Dense="true" Immediate="true" />
                    </MudTd>
                    <MudTd Class="postcode-column">
                        <MudTextField @bind-Value="editingBranch.Postcode"
                                      Dense="true" Immediate="true" />
                    </MudTd>
                    <MudTd Class="contact-column">
                        <MudTextField @bind-Value="editingBranch.Phone"
                                      Dense="true" Immediate="true" />
                    </MudTd>
                    <MudTd Style="text-align:center;">
                        <MudIconButton Icon="@Icons.Material.Filled.Check"
                                       Color="Color.Success"
                                       Size="Size.Small"
                                       OnClick="SaveEdit" />
                        <MudIconButton Icon="@Icons.Material.Filled.Close"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       OnClick="CancelEdit" />
                    </MudTd>
                }
                else
                {
                    <MudTd DataLabel="Branch ID">@context.BranchId</MudTd>
                    <MudTd DataLabel="Branch Name">@context.BranchName</MudTd>
                    <MudTd DataLabel="Address" Class="address-column">@context.Address</MudTd>
                    <MudTd DataLabel="Postcode" Class="postcode-column">@context.Postcode</MudTd>
                    <MudTd DataLabel="Phone" Class="contact-column">@context.Phone</MudTd>
                    <MudTd DataLabel="Actions" Style="text-align:center;">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit"
                                       Color="Color.Secondary"
                                       Size="Size.Small"
                                       OnClick="@(() => HandleEdit(context))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       OnClick="@(() => HandleDelete(context))" />
                    </MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

<style>
    .table-container {
        overflow: hidden;
    }

    /* Keep table tidy */
    .transfer-table .mud-table-cell {
        vertical-align: middle !important;
    }

    /* Make it scrollable */
    .transfer-table .mud-table-container {
        overflow-y: auto;
        scroll-behavior: smooth;
    }

    /* Sticky header + scroll */
    .transfer-table {
        display: block;
        max-height: 80vh;
        overflow-y: auto;
    }

        .transfer-table .mud-table-head {
            position: sticky;
            top: 0;
            z-index: 2;
            background-color: var(--mud-palette-surface);
        }

    /* Mobile view */
    @@media (max-width: 640.98px) {
        .transfer-table {
            font-size: 0.875rem;
        }

        .mud-table-cell,
        .mud-table-head-cell {
            padding: 8px 4px !important;
        }

        .mud-container {
            padding-left: 1rem !important;
            padding-right: 1rem !important;
        }

        .transfer-table {
            height: calc(100vh - 280px) !important;
        }
    }

    @@media (min-width: 641px) and (max-width: 960px) {
        .transfer-table {
            font-size: 0.9rem;
        }
    }

    @@media (min-width: 961px) and (max-width: 1280px) {
        .transfer-table {
            font-size: 0.95rem;
        }
    }

    @@media (min-width: 641px) {
        .transfer-table {
            overflow-x: auto;
        }

        .mud-container {
            max-width: 100%;
        }
    }

    /* Scrollbar style */
    .transfer-table .mud-table-container::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    .transfer-table .mud-table-container::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .transfer-table .mud-table-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

        .transfer-table .mud-table-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
</style>

@code {
    private List<Branch> branches = new();
    private Branch? editingBranch;

    protected override async Task OnInitializedAsync()
    {
        await LoadBranches();
    }

    private async Task LoadBranches()
    {
        try
        {
            var result = await BranchService.GetAllAsync();
            branches = result.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading branches: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error fetching branches: {ex.Message}");
        }
    }

    private async Task HandleAdd()
    {
        var dialog = await DialogService.ShowAsync<AddBranchDialog>("Add New Branch",
            new DialogParameters
            {
                ["OnCancel"] = EventCallback.Factory.Create(this, () => { }),
                ["OnSave"] = EventCallback.Factory.Create<bool>(this, async (success) =>
                {
                    if (success)
                    {
                        await LoadBranches();
                    }
                })
            },
            new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            });

        await dialog.Result;
    }

    private void HandleEdit(Branch branch)
    {
        editingBranch = new Branch
        {
            BranchId = branch.BranchId,
            BranchName = branch.BranchName,
            Address = branch.Address,
            Postcode = branch.Postcode,
            Phone = branch.Phone
        };
    }

    private async Task SaveEdit()
    {
        if (editingBranch == null) return;

        try
        {
            await BranchService.UpdateAsync(editingBranch);
            Snackbar.Add("Branch updated successfully!", Severity.Success);
            editingBranch = null;
            await LoadBranches();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating branch: {ex.Message}", Severity.Error);
        }
    }

    private void CancelEdit()
    {
        editingBranch = null;
    }

    private async Task HandleDelete(Branch branch)
    {
        bool? confirm = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete branch '{branch.BranchName}'?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (confirm == true)
        {
            try
            {
                await BranchService.DeleteAsync(branch.BranchId);
                Snackbar.Add("Branch deleted successfully!", Severity.Success);
                await LoadBranches();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting branch: {ex.Message}", Severity.Error);
            }
        }
    }
}