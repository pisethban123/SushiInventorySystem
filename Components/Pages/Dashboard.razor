@page "/"

@using SushiInventorySystem.Models
@using SushiInventorySystem.Services.Interfaces
@using SushiInventorySystem.Data
@using MudBlazor

@inject IItemService ItemService
@inject IStockService StockService
@inject IBranchService BranchService
@inject IServiceProvider ServiceProvider

<PageTitle>Inventory Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 px-2">
    <MudText Typo="Typo.h4" Class="mb-4">Inventory Dashboard</MudText>

    <MudGrid GutterSize="3">
        @* ==============================
           Low Stock Table
           ============================== *@
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h6" Class="mb-2 px-4 pt-4">Low Stock</MudText>

            <MudTable T="SushiInventorySystem.Models.Stock"
                      Items="@LowStockFiltered"
                      Hover="true" Striped="true" Bordered="true" Dense="false"
                      Class="dashboard-table">

                <ToolBarContent>
                    <MudText Typo="Typo.subtitle1" Class="toolbar-title">Low Stock Items</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="lowStockSearch"
                                  @bind-Value:event="oninput"
                                  Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Immediate="true"
                                  Class="mt-0 search-field" />
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>Item Name</MudTh>
                    <MudTh>Branch Name</MudTh>
                    <MudTh>Remaining Quantity</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Item Name">@GetItemName(context.ItemId)</MudTd>
                    <MudTd DataLabel="Branch Name">@GetBranchName(context.BranchId)</MudTd>
                    <MudTd DataLabel="Remaining Quantity">@context.Quantity</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>

        @* ==============================
           Overstock Table
           ============================== *@
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h6" Class="mb-2 px-4 pt-4">Overstock</MudText>

            <MudTable T="SushiInventorySystem.Models.Stock"
                      Items="@OverStockFiltered"
                      Hover="true" Striped="true" Bordered="true" Dense="false"
                      Class="dashboard-table">

                <ToolBarContent>
                    <MudText Typo="Typo.subtitle1" Class="toolbar-title">Overstock Items</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="overStockSearch"
                                  @bind-Value:event="oninput"
                                  Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Immediate="true"
                                  Class="mt-0 search-field" />
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>Item Name</MudTh>
                    <MudTh>Branch Name</MudTh>
                    <MudTh>Excess Quantity</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Item Name">@GetItemName(context.ItemId)</MudTd>
                    <MudTd DataLabel="Branch Name">@GetBranchName(context.BranchId)</MudTd>
                    <MudTd DataLabel="Excess Quantity">@context.Quantity</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>

    @* ==============================
       System Reports Section
       ============================== *@
    <MudDivider Class="my-4" />
    <MudText Typo="Typo.h5" Class="mb-2 px-4">
        <MudIcon Icon="@Icons.Material.Filled.InsertChart" Class="mr-2" />System Reports
    </MudText>

    <MudPaper Class="pa-4">
        @if (reports != null)
        {
            @foreach (var report in reports)
            {
                <MudPaper Class="pa-2 mb-2" Elevation="2">
                    <MudText Typo="Typo.subtitle1">@report.GetType().Name</MudText>
                    <MudText Typo="Typo.body2">@report.GenerateSummary()</MudText>
                </MudPaper>
            }
        }
        else
        {
            <MudText Typo="Typo.body2" Class="px-4">No reports available.</MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    // 🔹 검색용 필드
    private string lowStockSearch = "";
    private string overStockSearch = "";

    // 🔹 로드된 데이터 (모델 명시적)
    private List<SushiInventorySystem.Models.Item> items = new();
    private List<SushiInventorySystem.Models.Branch> branches = new();
    private List<SushiInventorySystem.Models.Stock> lowStockList = new();
    private List<SushiInventorySystem.Models.Stock> overStockList = new();
    private List<IReport>? reports;

    // 🔹 페이지 초기화
    protected override async Task OnInitializedAsync()
    {
        items = (await ItemService.GetAllAsync()).ToList();
        branches = (await BranchService.GetAllAsync()).ToList();
        lowStockList = (await StockService.GetLowStockItemsAsync()).ToList();
        overStockList = (await StockService.GetOverstockItemsAsync()).ToList();

        using var scope = ServiceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();

        reports = new List<IReport>
        {
            new StockReport(context),
            new BranchReport(context)
        };
    }

    // 🔹 ID → 이름 매핑 함수
    private string GetItemName(string? itemId)
    {
        var item = items?.FirstOrDefault(i => i.ItemId == itemId);
        return item?.ItemName ?? itemId ?? "";
    }

    private string GetBranchName(string? branchId)
    {
        var branch = branches?.FirstOrDefault(b => b.BranchId == branchId);
        return branch?.BranchName ?? branchId ?? "";
    }

    // 🔹 필터링된 결과 리스트
private IEnumerable<SushiInventorySystem.Models.Stock> LowStockFiltered =>
    string.IsNullOrWhiteSpace(lowStockSearch)
        ? lowStockList
        : lowStockList.Where(s =>
            (s.Item?.ItemName?.Contains(lowStockSearch, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (s.Branch?.BranchName?.Contains(lowStockSearch, StringComparison.OrdinalIgnoreCase) ?? false));



    private IEnumerable<SushiInventorySystem.Models.Stock> OverStockFiltered =>
        string.IsNullOrWhiteSpace(overStockSearch)
            ? overStockList
            : overStockList.Where(s =>
                GetItemName(s.ItemId).Contains(overStockSearch, StringComparison.OrdinalIgnoreCase) ||
                GetBranchName(s.BranchId).Contains(overStockSearch, StringComparison.OrdinalIgnoreCase));
}
